syntax = "proto3";

package management.system.service;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/QuanDN22/Server-Management-System/proto/management-system";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "Management-System API";
        version: "1.0";
        description: "";
        contact: {
        name: "gRPC-Gateway project";
        url: "https://github.com/grpc-ecosystem/grpc-gateway";
        email: "none@example.com";
    };
    license: {
        name: "BSD 3-Clause License";
        url: "https://github.com/grpc-ecosystem/grpc-gateway/blob/main/LICENSE";
        };
    };
    schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";
};

service ManagementSystem {
    // Ping server
    rpc Ping(google.protobuf.Empty) returns (PingResponse) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Ping server";
            description: "Ping server";
            operation_id: "Ping";
            tags: [ "Server" ];
        };
        option (google.api.http) = {
            get: "/v1/api/servers/ping"
        };
    };

    // Create server
    rpc CreateServer(CreateServerRequest) returns (Server) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Create server";
            description: "Create server";
            operation_id: "CreateServer";
            tags: [ "Server" ];
        };

        option (google.api.http) = {
            post: "/v1/api/servers"
            body: "*"
        };
    };

    // View server

    // Update server
    rpc UpdateServer(UpdateServerRequest) returns (Server) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Update server";
            description: "Update server";
            operation_id: "UpdateServer";
            tags: [ "Server" ];
        };

        option (google.api.http) = {
            put: "/v1/api/servers/{server_id}"
            body: "*"
        };
    };

    // Delete server
    rpc DeleteServer(DeleteServerRequest) returns (google.protobuf.Empty) {
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Delete server";
            description: "Delete server";
            operation_id: "DeleteServer";
            tags: [ "Server" ];
        };
        option (google.api.http) = {
            delete: "/v1/api/servers/{server_id}"
        };
    };

    // Import server


    // Export server
}

// ping response
message PingResponse {
    string pong = 1;
}

// delete server
message DeleteServerRequest {
    int64 Server_ID = 1 [ json_name = "server_id" ];
}

// update server request
message UpdateServerRequest {
    int64 Server_ID = 1 [ json_name = "server_id" ];
    string Server_Name = 2 [ json_name = "server_name" ];
    string Server_IPv4 = 3 [ json_name = "server_ipv4" ];
    bool Server_Status = 4 [ json_name = "server_status" ];
}

// create server request
message CreateServerRequest {
    string Server_Name = 1  [ json_name = "server_name" ];
	string Server_IPv4 = 2  [ json_name = "server_ipv4" ];
    bool Server_Status = 3  [ json_name = "server_status" ];
}

// server
message Server {
    int64 Server_ID = 1 [ json_name = "server_id" ];
    string Server_Name = 2 [ json_name = "server_name" ];
    string Server_IPv4 = 3 [ json_name = "server_ipv4" ];
    bool Server_Status = 4 [ json_name = "server_status" ];

    google.protobuf.Timestamp CreatedAt = 5 [ json_name = "created_at" ];
    google.protobuf.Timestamp UpdatedAt = 6 [ json_name = "updated_at" ];
}
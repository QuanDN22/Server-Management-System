# Copyright VMware, Inc.
# SPDX-License-Identifier: APACHE-2.0

version: "2"

services:
  database.auth:
    container_name: database.auth
    image: 'postgres:latest'
    restart: always

    # By default, a Postgres database is running on the 5432 port.
    # If we want to access the database from our computer (outside the container),
    # we must share the port with our computer's port.
    # The syntax is [port we want on our machine]:[port we want to retrieve in the container]
    # Note: You are free to change your computer's port,
    # but take into consideration that it will change the way
    # you are connecting to your database.
    ports:
      - 5434:5432
    environment:
      POSTGRES_USER: postgres 
      POSTGRES_PASSWORD: quan1234 
      POSTGRES_DB: Server-Management-System-Auth-Server 
    volumes:
      - ./data/postgres/auth:/var/lib/postgresql/data

  database.server:
    container_name: database.server
    image: 'postgres:latest'
    restart: always
    ports:
      - 5433:5432
    environment:
      POSTGRES_USER: postgres 
      POSTGRES_PASSWORD: quan1234 
      POSTGRES_DB: Server-Management-System-MS-Server # The PostgreSQL default database (automatically created at first launch)
    volumes:
      - ./data/postgres/server:/var/lib/postgresql/data

  kafka:
    container_name: kafka
    image: docker.io/bitnami/kafka:3.5
    ports:
      - "9092:9092"
    volumes:
      - ./data/kafka:/bitnami
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.1
    environment: 
      - xpack.security.enabled=false
      - discovery.type=single-node
    ports:
      - 9200:9200
    volumes:
      - ./data/elasticsearch:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.1
    container_name: kibana
    environment:
      # XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY: d1a66dfd-c4d3-4a0a-8290-2abcb83ab3aa
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200    # address of elasticsearch docker container which kibana will connect
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch         # kibana will start when elasticsearch has started
  
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - 6379:6379
    volumes:
      - ./data/redis:/data

  # auth service 
  auth-service:
    container_name: auth-service
    image: auth-service
    restart: always
    build:
      context: .
      dockerfile: ./docker/Dockerfile-auth
    depends_on:
      - database.auth
  
  # management server service
  management-system-service:
    container_name: management-system-service
    image: management-system-service
    restart: always
    build:
      context: .
      dockerfile: ./docker/Dockerfile-management-system
    depends_on:
      - database.server
      - kafka
      - redis

  # monitor service
  monitor-service:
    container_name: monitor-service
    image: monitor-service
    restart: always
    build:
      context: .
      dockerfile: ./docker/Dockerfile-monitor
    depends_on:
      - kafka
      - elasticsearch

  # mail service
  mail-service:
    container_name: mail-service
    image: mail-service
    build:
      context: .
      dockerfile: ./docker/Dockerfile-mail

  # grpc-gateway
  grpc-gateway:
    container_name: grpc-gateway
    image: grpc-gateway
    build:
      context: .
      dockerfile: ./docker/Dockerfile-grpc-gateway
    ports:
      - "8080:8080"
    depends_on:
      - auth-service
      - management-system-service

volumes:
  data:
    driver: local
